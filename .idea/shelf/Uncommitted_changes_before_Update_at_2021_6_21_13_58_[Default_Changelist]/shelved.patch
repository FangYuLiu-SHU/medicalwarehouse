Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding:utf-8 -*-\r\nfrom flask import Flask, render_template, request\r\nimport pymysql\r\nimport pandas as pd\r\nimport json\r\nfrom utils import tool\r\nfrom utils import load_data\r\nimport os\r\nfrom algorithm import predict\r\nfrom sqlalchemy import create_engine\r\nimport pymssql\r\n\r\n# 连接数据库\r\ntry:\r\n    db = pymysql.connect(\r\n             host='58.199.160.140',\r\n             port=3306,\r\n             user='root',\r\n             passwd='000000',\r\n             db ='medical_dw',\r\n             charset='utf8'\r\n             )\r\n    engine = create_engine(\"mysql+pymysql://root:000000@58.199.160.140:3306/medical_dw?charset=utf8\")\r\nexcept:\r\n    print('数据库连接失败！')\r\n    exit(0)\r\n\r\n# 使用cursor()方法创建一个游标对象cursor，用于执行SQL语句\r\ncursor = db.cursor()\r\n\r\n# # 关闭数据库连接\r\n# db.close()\r\n\r\n\r\napp = Flask(__name__)\r\napp.secret_key = '000000'\r\n\r\n\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return render_template('index.html')\r\n\r\n# 数据导入\r\n@app.route('/dataimport', methods=[\"GET\", \"POST\"])\r\ndef dataimport():\r\n    data_source = request.form.get('data_source')   # 数据来源\r\n    dept = request.form.get('dept')     # 科室\r\n    # print(data_source, dept)\r\n    # 确定信息表字段\r\n    if dept == 'kidney':\r\n        patient_info_table_name = 'ods_kidney_info'\r\n        pulse_table_name = 'ods_kidney_pulse_'\r\n        col_names = ['id', 'sex', 'age', 'staging', 'serum_creatinine', 'eGFR', 'symptoms_type', 'tongue', 'pulse']\r\n    elif dept == 'liver':\r\n        patient_info_table_name = 'ods_liver_info'\r\n        pulse_table_name = 'ods_liver_pulse_'\r\n        col_names = ['id', 'sex', 'age', 'ALT', 'symptoms_type', 'tongue', 'pulse']\r\n    elif dept == 'lung':\r\n        patient_info_table_name = 'ods_lung_info'\r\n        pulse_table_name = 'ods_lung_pulse_'\r\n        col_names = ['id', 'sex', 'age', 'wm_diagnosis', 'lung_qi_deficiency', 'spleen_qi_deficiency', 'kidney_qi_deficiency',\r\n                      'FEV1', 'FVC', 'FEV1%', 'FEV1/FVC', 'PEF', 'tongueA', 'tongueB', 'tongueC', 'pulseA', 'pulseB', 'pulseC', ]\r\n\r\n    patient_info_path = './tmp/patientinfo'\r\n    pulse_path = './tmp/pulse'\r\n    if data_source == 'local':              # 从本地导入数据到数据仓库\r\n        patient_info_file = request.files.getlist(\"file\")[0]  # 病例信息表\r\n        patient_info_file_encoding = request.form.get('patient_info_file_encoding') # 病例信息表编码格式\r\n        pulse_files = request.files.getlist(\"fileDir\")  # 脉搏信号表,多个，数组存放\r\n        pulse_file_encoding = request.form.get('pulse_file_encoding')  # 脉搏信号表编码格式\r\n        try:\r\n            # 清空临时文件目录下的所有内容\r\n            load_data.clear_folder('./tmp/')\r\n            # 保存到临时文件\r\n            if patient_info_file is not None:\r\n                patient_info_file.save(os.path.join(patient_info_path, 'patient_info.csv'))\r\n            if pulse_files is not None:\r\n                for pulse_file in pulse_files:\r\n                    filename = pulse_file.filename\r\n                    filename = filename[filename.index('/')+1:]\r\n                    pulse_file.save(os.path.join(pulse_path, filename))\r\n        except:\r\n            print('Data uploading failed！')\r\n            return 'Data uploading failed！'\r\n\r\n        # 将数据导入数据仓库\r\n        try:\r\n            if dept == 'kidney':\r\n                load_data.load_kidney_info_to_mysql(os.path.join(patient_info_path, 'patient_info.csv'), encoding=patient_info_file_encoding)\r\n                load_data.load_kidney_pulse_to_mysql(pulse_path, encoding=pulse_file_encoding)\r\n            elif dept == 'liver':\r\n                load_data.load_liver_info_to_mysql(os.path.join(patient_info_path, 'patient_info.csv'), encoding=patient_info_file_encoding)\r\n                load_data.load_liver_pulse_to_mysql(pulse_path, encoding=pulse_file_encoding)\r\n            elif dept == 'lung':\r\n                load_data.load_lung_info_to_mysql(os.path.join(patient_info_path, 'patient_info.csv'), encoding=patient_info_file_encoding)\r\n                load_data.load_lung_pulse_to_mysql(pulse_path, encoding=pulse_file_encoding)\r\n        except:\r\n            print('Data importing fialed！')\r\n            load_data.clear_folder('./tmp/')\r\n            return 'Data importing fialed！'\r\n        load_data.clear_folder('./tmp/')\r\n    elif data_source == 'MySQL':            # 从MySQL导入数据到数据仓库\r\n        host = request.form.get('host')\r\n        port = request.form.get('port')\r\n        user = request.form.get('user')\r\n        passwd = request.form.get('passwd')\r\n        db = request.form.get('db')\r\n        charset = request.form.get('charset')\r\n        patient_info_table = request.form.get('patient_info_table')\r\n        pulse_table_na_rule = request.form.get('pulse_table_na_rule')\r\n        # print(host, port, user, passwd, db, charset, patient_info_table)\r\n        import_database_data(patient_info_table_name, pulse_table_name, host, port, user, passwd, db, charset,\r\n                                  patient_info_table,data_source)\r\n        # try:\r\n        #     # 连接数据库\r\n        #     src_db = pymysql.connect(host=host, port=int(port), user=user, passwd=passwd, db=db, charset=charset)\r\n        #     src_cursor = src_db.cursor()\r\n        #     # 读取病例信息表\r\n        #     sql = 'select * from ' + str(patient_info_table)\r\n        #     src_cursor.execute(sql)\r\n        #     query_result = src_cursor.fetchall()\r\n        #     if len(query_result) == 0:\r\n        #         print('Empty table!')\r\n        #         return 'Empty table!'\r\n        #     elif len(query_result[0]) != len(col_names):\r\n        #         print('Columns do not match!')\r\n        #         return 'Columns do not match!'\r\n        #     pd_patient_info = pd.DataFrame(list(query_result), columns=col_names)\r\n        #     # print(pd_patient_info)\r\n        #     # 导入病例信息表到数据仓库\r\n        #     # print(patient_info_table_name)\r\n        #     pd_patient_info.to_sql(name=patient_info_table_name, con=engine, if_exists='append', index=False)\r\n        #\r\n        #     # 读取并导入脉象数据\r\n        #     for patient_id in pd_patient_info['id']:\r\n        #         sql = 'select * from ' + pulse_table_name + patient_id\r\n        #         try:\r\n        #             src_cursor.execute(sql)\r\n        #         except:\r\n        #             print(patient_id, '脉博数据表不存在！')\r\n        #             continue\r\n        #         query_result = src_cursor.fetchall()\r\n        #         pd_pulse = pd.DataFrame(list(query_result))\r\n        #         # print(pd_pulse)\r\n        #         pd_pulse.to_sql(name=pulse_table_name+patient_id.lower(), con=engine, if_exists='replace', index=False)\r\n        # except:\r\n        #     print('Data importing failed！')\r\n        #     return 'Data importing failed！'\r\n    elif data_source == 'SqlServer':  # 从MySQL导入数据到数据仓库\r\n        host = request.form.get('host')\r\n        port = request.form.get('port')\r\n        user = request.form.get('user')\r\n        passwd = request.form.get('passwd')\r\n        db = request.form.get('db')\r\n        patient_info_table = request.form.get('patient_info_table')\r\n        pulse_table_na_rule = request.form.get('pulse_table_na_rule')\r\n        charset=\"GBK\"\r\n        import_database_data(patient_info_table_name, pulse_table_name, host, port, user, passwd, db,charset,\r\n                              patient_info_table,data_source)\r\n\r\n    return 'Data importing succeed！'\r\n    \r\n\r\n#patient_info_table_name 表名 pulse_table_name脉冲表名字\r\ndef import_database_data(patient_info_table_name,pulse_table_name,host,port,user,passwd,db,charset,patient_info_table,data_source):\r\n    try:\r\n        #连接数据库\r\n        conn=\"\"\r\n        if data_source=='MySQL':\r\n            conn=pymysql.connect(host=host, port=port, user=user, passwd=passwd, db=db, charset=charset)\r\n        if data_source == 'SqlServer':\r\n            conn= pymssql.connect( host=host, port=port,  user=user,password=passwd,  database=db ,charset=charset)\r\n        cursor = conn.cursor()\r\n        # 读取病例信息表\r\n        sqlstr = 'select * from ' + patient_info_table\r\n        cursor.execute(sqlstr)\r\n        data = cursor.fetchall()  # 读取数据\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:, 0].tolist()\r\n        pd_patient_info = pd.DataFrame(list(data), columns=col_names)\r\n        if len(pd_patient_info) == 0:\r\n            print('No data!')\r\n            return 'No data!'\r\n        # 导入病例信息表到数据仓库\r\n        pd_patient_info.to_sql(name=patient_info_table_name, con=engine, if_exists='append', index=False)\r\n        # 读取并导入脉象数据\r\n        for patient_id in pd_patient_info['id']:\r\n            sql = 'select * from ' + pulse_table_name + patient_id\r\n            try:\r\n                cursor.execute(sql)\r\n            except:\r\n                print(patient_id, '脉博数据表不存在！')\r\n                continue\r\n            query_result = cursor.fetchall()\r\n            pd_pulse = pd.DataFrame(list(query_result))\r\n            print(pd_pulse)\r\n            pd_pulse.to_sql(name=pulse_table_name + patient_id.lower(), con=engine, if_exists='replace', index=False)\r\n    except:\r\n        print('Data import failed！')\r\n        return 'Data import failed！'\r\n\r\n@app.route('/fileInput', methods=[\"GET\", \"POST\"])\r\ndef fileInpute():\r\n    return render_template('fileInput.html')\r\n\r\n# 肾科病人信息统计\r\n@app.route('/datastatistic', methods=[\"GET\", \"POST\"])\r\ndef kidney_statistic():\r\n    if request.method == \"GET\":\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(\"SELECT sex, age, serum_creatinine, eGFR, symptoms_type FROM dwd_kidney_info;\")\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return 0\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:,0].tolist()\r\n        pd_patient_info = pd.DataFrame(list(query_result), columns=col_names)\r\n\r\n        data = tool.get_statistic_info(pd_patient_info)\r\n\r\n        data_json = json.dumps(data)\r\n        # return data_json\r\n        return render_template('datastatistic.html', data_json=data_json)\r\n    elif request.method == \"POST\":\r\n        gender = request.form.get('gender')\r\n        min_age = request.form.get('min_age')\r\n        max_age = request.form.get('max_age')\r\n        min_sc_value = request.form.get('min_sc_value')\r\n        max_sc_value = request.form.get('max_sc_value')\r\n        min_eGFR = request.form.get('min_eGFR')\r\n        max_eGFR = request.form.get('max_eGFR')\r\n        symptoms_type = request.form.get('symptoms_type')\r\n        # print(gender, symptoms_type, min_age, max_age, min_sc_value, max_sc_value, min_eGFR, max_eGFR)\r\n\r\n        sql = \"SELECT sex, age, serum_creatinine, eGFR, symptoms_type FROM dwd_kidney_info WHERE id IS NOT NULL\"\r\n        t = [None, '', 'all']\r\n        if gender not in t:\r\n            sql = sql + \" AND sex=\" + str(gender)\r\n        if min_age not in t:\r\n            sql = sql + \" AND age>=\" + str(min_age)\r\n        if max_age not in t:\r\n            sql = sql + \" AND age<=\" + str(max_age)\r\n        if min_sc_value not in t:\r\n            sql = sql + \" AND serum_creatinine>=\" + str(min_sc_value)\r\n        if max_sc_value not in t:\r\n            sql = sql + \" AND serum_creatinine<=\" + str(max_sc_value)\r\n        if min_eGFR not in t:\r\n            sql = sql + \" AND eGFR>=\" + str(min_eGFR)\r\n        if min_sc_value not in t:\r\n            sql = sql + \" AND eGFR>=\" + str(max_eGFR)\r\n        if symptoms_type not in t:\r\n            sql = sql + \" AND symptoms_type=\" + str(symptoms_type)\r\n        # print(sql)\r\n\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(sql)\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return '从服务器获取数据失败'\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:, 0].tolist()\r\n        pd_patient_info = pd.DataFrame(list(query_result), columns=col_names)\r\n        # print(pd_patient_info)\r\n\r\n        data = tool.get_statistic_info(pd_patient_info)\r\n\r\n        data_json = json.dumps(data)\r\n        return data_json\r\n\r\n\r\n@app.route('/statistic_kidney',methods=['GET', 'POST'])\r\ndef statistic_detail_kidney():\r\n    return render_template('statistic_kidney.html')\r\n\r\n\r\n# 肝科病人信息统计\r\n@app.route('/liver_statistic', methods=[\"GET\", \"POST\"])\r\ndef liver_statistic():\r\n    if request.method == \"GET\":\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(\"SELECT sex, age, ALT, symptoms_type FROM dwd_liver_info;\")\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return '从服务器获取数据失败'\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:,0].tolist()\r\n        pd_liver_info = pd.DataFrame(list(query_result), columns=col_names)\r\n\r\n        data = tool.get_liver_statistic_info(pd_liver_info)\r\n\r\n        data_json = json.dumps(data)\r\n        return data_json\r\n    elif request.method == \"POST\":\r\n        gender = request.form.get('gender')\r\n        min_age = request.form.get('min_age')\r\n        max_age = request.form.get('max_age')\r\n        min_ALT = request.form.get('min_ALT')\r\n        max_ALT = request.form.get('max_ALT')\r\n        symptoms_type = request.form.get('symptoms_type')\r\n        print(gender, symptoms_type, min_age, max_age, min_ALT, max_ALT)\r\n\r\n        sql = \"SELECT sex, age, ALT, symptoms_type FROM dwd_liver_info WHERE id IS NOT NULL\"\r\n        t = [None, '', 'all']\r\n        gender_dict = {'1':'2', '2':'1'}\r\n        if gender not in t:\r\n            sql = sql + \" AND sex=\" + gender_dict[str(gender)]\r\n        if min_age not in t:\r\n            sql = sql + \" AND age>=\" + str(min_age)\r\n        if max_age not in t:\r\n            sql = sql + \" AND age<=\" + str(max_age)\r\n        if min_ALT not in t:\r\n            sql = sql + \" AND ALT>=\" + str(min_ALT)\r\n        if max_ALT not in t:\r\n            sql = sql + \" AND ALT<=\" + str(max_ALT)\r\n        if symptoms_type not in t:\r\n            sql = sql + \" AND symptoms_type=\" + str(symptoms_type)\r\n        # print(sql)\r\n\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(sql)\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return '从服务器获取数据失败'\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:, 0].tolist()\r\n        pd_liver_info = pd.DataFrame(list(query_result), columns=col_names)\r\n        # print(pd_liver_info)\r\n\r\n        data = tool.get_liver_statistic_info(pd_liver_info)\r\n        # print(data)\r\n\r\n        data_json = json.dumps(data)\r\n        return data_json\r\n\r\n@app.route('/statistic_liver',methods=['GET', 'POST'])\r\ndef statistic_detail_liver():\r\n    return render_template('statistic_liver.html')\r\n\r\n# 肺科病人信息统计\r\n@app.route('/lung_statistic', methods=[\"GET\", \"POST\"])\r\ndef lung_statistic():\r\n    if request.method == \"GET\":\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(\"SELECT sex, age, Lung_qi_deficiency, spleen_qi_deficiency, kidney_qi_deficiency FROM dwd_lung_info;\")\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return '从服务器获取数据失败'\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:,0].tolist()\r\n        pd_lung_info = pd.DataFrame(list(query_result), columns=col_names)\r\n        # print(pd_lung_info)\r\n\r\n        data = tool.get_lung_statistic_info(pd_lung_info)\r\n        # print(data)\r\n\r\n        data_json = json.dumps(data)\r\n        return data_json\r\n    elif request.method == \"POST\":\r\n        gender = request.form.get('gender')\r\n        min_age = request.form.get('min_age')\r\n        max_age = request.form.get('max_age')\r\n        Lung_qi_deficiency = request.form.get('Lung_qi_deficiency')\r\n        spleen_qi_deficiency = request.form.get('spleen_qi_deficiency')\r\n        kidney_qi_deficiency = request.form.get('kidney_qi_deficiency')\r\n        # print(gender, min_age, max_age, Lung_qi_deficiency, spleen_qi_deficiency, kidney_qi_deficiency)\r\n\r\n        sql = \"SELECT sex, age, Lung_qi_deficiency, spleen_qi_deficiency, kidney_qi_deficiency FROM dwd_lung_info WHERE id IS NOT NULL\"\r\n        t = [None, '', 'all']\r\n        if gender not in t:\r\n            sql = sql + \" AND sex=\" + str(gender)\r\n        if min_age not in t:\r\n            sql = sql + \" AND age>=\" + str(min_age)\r\n        if max_age not in t:\r\n            sql = sql + \" AND age<=\" + str(max_age)\r\n        if Lung_qi_deficiency not in t:\r\n            sql = sql + \" AND Lung_qi_deficiency=\" + str(Lung_qi_deficiency)\r\n        if spleen_qi_deficiency not in t:\r\n            sql = sql + \" AND spleen_qi_deficiency=\" + str(spleen_qi_deficiency)\r\n        if kidney_qi_deficiency not in t:\r\n            sql = sql + \" AND kidney_qi_deficiency=\" + str(kidney_qi_deficiency)\r\n        # print(sql)\r\n\r\n        # 从数据库获取病人信息表\r\n        try:\r\n            cursor.execute(sql)\r\n        except:\r\n            print('从服务器获取数据失败')\r\n            return '从服务器获取数据失败'\r\n        query_result = cursor.fetchall()\r\n        col_names = pd.DataFrame(list(cursor.description)).iloc[:, 0].tolist()\r\n        pd_lung_info = pd.DataFrame(list(query_result), columns=col_names)\r\n        # print(pd_lung_info)\r\n\r\n        data = tool.get_lung_statistic_info(pd_lung_info)\r\n        # print(data)\r\n\r\n        data_json = json.dumps(data)\r\n        return data_json\r\n@app.route('/statistic_lung',methods=['GET', 'POST'])\r\ndef statistic_detail_lung():\r\n    return render_template('statistic_lung.html')\r\n\r\n# 病人信息展示页面\r\n@app.route('/patient_info_show')\r\ndef patient_info_show():\r\n    return render_template('patient_info.html',page_data=json.dumps([]))\r\n\r\n\r\n@app.route('/patient_info_by_condition',methods=['POST'])\r\ndef patient_info_by_condition():\r\n    page = request.form.get('page')  # 页数\r\n    limit = request.form.get('limit')  # 每页显示的数量\r\n    if page is None:\r\n        page=1\r\n    if limit is None:\r\n        limit=1\r\n    id = request.form.get('id')  # 编号\r\n    sex = request.form.get('sex')  # 性别\r\n    age = json.loads(request.form.get('age'))  # 年龄\r\n    serum_creatinine = json.loads(request.form.get('serum_creatinine'))  # 血肌酐\r\n    eGFR = json.loads(request.form.get('eGFR'))\r\n    symptoms = request.form.get('symptoms')  # 症型(1=肾阳虚，2=肾阴虚)\r\n    sql = \"select * from dwd_kidney_info where 1=1 \"\r\n    if id!=\"\":\r\n        sql+=\"and id='\" + str(id) + \"'\"\r\n    if sex!=\"\":\r\n        sql += \"and sex='\" + str(sex) + \"'\"\r\n    if age[0]!=\"\" :\r\n        sql += \"and age>='\" + str(age[0]) + \"'\"\r\n    if age[1]!=\"\" :\r\n        sql += \"and age<='\" +  str(age[1]) + \"'\"\r\n    if serum_creatinine[0]!=\"\":\r\n        sql += \"and serum_creatinine>='\" + str(serum_creatinine[0]) + \"'\"\r\n    if serum_creatinine[1]!=\"\":\r\n        sql += \"and serum_creatinine<='\" +  str(serum_creatinine[1]) + \"'\"\r\n    if eGFR[0]!=\"\":\r\n        sql += \"and eGFR>='\" + str(eGFR[0]) + \"'\"\r\n    if eGFR[1]!=\"\":\r\n        sql += \"and eGFR<='\" +  str(eGFR[1]) + \"'\"\r\n    if symptoms!=\"\":\r\n        sql += \"and symptoms_type='\" + str(symptoms) + \"'\"\r\n    offset = (int(page) - 1) * int(limit)  # 起始行\r\n    cursor.execute(sql)  # 获得所有符合条件的数据\r\n    totalQueryData = cursor.fetchall()\r\n    sql+=\"limit \"+str(offset)+','+str(limit)\r\n    # sql_total_count = \"select count(*) from dwd_patient_info\"  # 总的记录数\r\n    # cursor.execute(sql_total_count)  # 执行sql语句\r\n    # patient_total_count = cursor.fetchall()  # 取数据\r\n    cursor.execute(sql)\r\n    data = cursor.fetchall()\r\n    json_data = {}\r\n    result_data = []\r\n    sql_COLUMN_NAME = \"select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name = 'dwd_kidney_info' and \" \\\r\n                      \"table_schema = 'medical_dw' ORDER BY ordinal_position\"\r\n    cursor.execute(sql_COLUMN_NAME)  \r\n    column_names = cursor.fetchall()  # 获取列名字数据\r\n    for result in data:\r\n        one_person = {}\r\n        for i in range(len(column_names)):\r\n            one_person[column_names[i][0]] = str(result[i])\r\n        result_data.append(one_person)\r\n        \r\n    json_data[\"code\"] = str(0)\r\n    json_data['total'] = len(totalQueryData)\r\n    json_data['data'] = result_data\r\n    json_data = json.dumps(json_data, ensure_ascii=False)\r\n    return json_data\r\n\r\n\r\n@app.route('/disease_prediction', methods=[\"GET\", \"POST\"])\r\ndef disease_prediction():\r\n    if request.method == \"GET\":\r\n        formData={'sex': '男', 'userage': '', 'stage': '', 'bloodCreatinine': '', 'egfr': '', 'fileName': '', 'pulseType': ''}\r\n        newData = json.dumps(formData)  # json.dumps封装\r\n        return render_template('diseasePrediction.html', newData=newData)\r\n    if request.method == \"POST\":\r\n        #获取前端请求的表单数据\r\n        formData = request.form.to_dict()\r\n        # 获取pulseFile文件对象\r\n        pulseFile = request.files.get('pulseFile')\r\n        # 保存到服务器\r\n        # save方法传完整的路径和文件名\r\n        # pulseFile.save(os.path.join(UPLOAD_PATH,pulseFile.filename))\r\n        # 上行可以进行优化,下行是对pulseFile文件名进行包装，保证文件名更安全。\r\n        filename = \"pulseFile.csv\"\r\n        pulseFile.save(os.path.join(\"./files/\", filename))\r\n        #print(pulseFile)\r\n\r\n        filename_in = './files/pulseFile.csv'\r\n        #filename_out = './files/pulseFileUTF.csv'\r\n\r\n        # 输入文件的编码类型\r\n        #encode_in = 'utf-16 le'\r\n\r\n        # 输出文件的编码类型\r\n        # encode_out = 'utf-8'\r\n        #\r\n        # with codecs.open(filename=filename_in, mode='r', encoding=encode_in) as fi:\r\n        #     data = fi.read()\r\n        #     with open(filename_out, mode='w', encoding=encode_out) as fo:\r\n        #         fo.write(data)\r\n        #         fo.close()\r\n        #输入表维度大小\r\n        rows=2560\r\n        cols=57\r\n        data = pd.read_csv(filename_in, encoding=\"utf-8\", header=None, nrows=rows, usecols=[i for i in range(cols)])\r\n        # 调用模型计算脉搏类型预测结果\r\n        result=predict.pulsePrediction(data.values)\r\n        #print(data.dropna(axis=1).values)\r\n        #print(data)\r\n        formData['pulseType'] = result\r\n        formData['fileName'] = ''\r\n        # print(formData)\r\n        newData = json.dumps(formData)  # json.dumps封装\r\n        #print(newData)\r\n        return render_template('diseasePrediction.html', newData=newData)\r\n    \r\n    \r\n#用户通道数量      \r\n@app.route('/find_channelNumber',methods=['GET','POST'])\r\ndef find_channelNumber():\r\n    id = request.form.get('id')  # 用户id\r\n    type=request.form.get('type')\r\n    if (type=='kidney' or type=='liver'):\r\n        sql = \"select count(*) from information_schema.COLUMNS where TABLE_SCHEMA='medical_dw' and table_name='ods_\"+type+\"_pulse_\" + str(\r\n        id) + \"'\"\r\n    elif (type=='lung'):\r\n        sql = \"select count(*) from information_schema.COLUMNS where TABLE_SCHEMA='medical_dw' and table_name='ods_lung_pulse_\" + str(\r\n            id).casefold() + \"'\"\r\n    cursor.execute(sql)  # 执行sql语句\r\n    res = cursor.fetchall()  # 取数据\r\n    json_data={}\r\n    json_data['channelNumber'] = res[0][0]\r\n    print(json_data['channelNumber'])\r\n    return json.dumps(json_data)\r\n\r\n\r\n#根据id及通道编号获取用户通道数据\r\n@app.route('/channel_data',methods=['GET','POST'])\r\ndef channel_data():\r\n    id = request.form.get('id')  # 用户id\r\n    num = request.form.get('num')  # 通道编号\r\n    num=int(num)-1\r\n    type = request.form.get('type')\r\n    if (type == 'kidney' or type == 'liver'):\r\n        sql = \"select `\" + str(num) + \"` from medical_dw.ods_\"+type+\"_pulse_\" + str(id)\r\n    elif (type == 'lung'):\r\n        sql = \"select `\" + str(num) + \"` from medical_dw.ods_lung_pulse_\" + str(id).casefold()\r\n    cursor.execute(sql)  # 执行sql语句\r\n    res = cursor.fetchall()  # 取数据\r\n    json_data = {}\r\n    channel_data = []\r\n    for i in res:\r\n        channel_data.append(round(i[0],5))\r\n    json_data[\"data\"] = channel_data\r\n    return json.dumps(json_data)\r\n    \r\n    \r\n#查询肺病人的信息\r\n@app.route('/lung_patient_info',methods=['POST'])\r\ndef lung_patient_info():\r\n    page = request.form.get('page')  # 页数\r\n    limit = request.form.get('limit')  # 每页显示的数量\r\n    if page is None or page==\"\":\r\n        page=1\r\n    if limit is None or limit==\"\":\r\n        limit=10\r\n    id = request.form.get('id')  # 编号\r\n    sex = request.form.get('sex')  # 性别\r\n    age = json.loads(request.form.get('age'))  # 年龄\r\n    wm_diagnosis = request.form.get('wm_diagnosis')  # 西医诊断\r\n    fei_qi_xu = request.form.get('fei_qi_xu')  # 肺气虚\r\n    pi_qi_xu = request.form.get('pi_qi_xu')  # 脾气虚\r\n    sheng_qi_xu = request.form.get('sheng_qi_xu')  # 肾气虚\r\n    FEV1 = json.loads(request.form.get('FEV1'))  # 年龄\r\n    FVC = json.loads(request.form.get('FVC'))  # 年龄\r\n    FEV11 = json.loads(request.form.get('FEV1%'))  # 年龄\r\n    FEV2 = json.loads(request.form.get('FEV1/FVC'))  # FEV1 / FVC改值\r\n    PEF = json.loads(request.form.get('PEF'))\r\n    tongue = request.form.get('tongue')  # 舌象\r\n    pulse = request.form.get('pulse')  # 脉象\r\n    sql = \"select * from dwd_lung_info where 1=1 \"\r\n    print(sql)\r\n    if id != \"\":\r\n        sql += \"and id='\" + str(id) + \"'\"\r\n    if sex != \"\":\r\n        sql += \"and sex='\" + str(sex) + \"'\"\r\n    if age != \"\" and age[0] != \"\":\r\n        sql += \"and age>='\" + str(age[0]) + \"'\"\r\n    if age != \"\" and age[1] != \"\":\r\n        sql += \"and age<='\" + str(age[1]) + \"'\"\r\n    if wm_diagnosis != \"\":\r\n        sql += \"and wm_diagnosis like '\" + \"%\" + str(wm_diagnosis) + \"%\" + \"'\"\r\n    if fei_qi_xu != \"\":\r\n        sql += \"and Lung_qi_deficiency='\" + str(fei_qi_xu) + \"'\"\r\n    if pi_qi_xu != \"\":\r\n        sql += \"and spleen_qi_deficiency='\" + str(pi_qi_xu) + \"'\"\r\n    if sheng_qi_xu != \"\":\r\n        sql += \"and kidney_qi_deficiency='\" + str(sheng_qi_xu) + \"'\"\r\n    if FEV1 != \"\" and FEV1[0] != \"\":\r\n        sql += \"and FEV1>='\" + str(FEV1[0]) + \"'\"\r\n    if FEV1 != \"\" and FEV1[1] != \"\":\r\n        sql += \"and FEV1<='\" + str(FEV1[1]) + \"'\"\r\n    if FVC != \"\" and FVC[0] != \"\":\r\n        sql += \"and FVC>='\" + str(FVC[0]) + \"'\"\r\n    if FVC != \"\" and FVC[1] != \"\":\r\n        sql += \"and FVC<='\" + str(FVC[1]) + \"'\"\r\n    if FEV11 != \"\" and FEV11[0] != \"\":\r\n        sql += \"and \\'FEV1%\\'>='\" + str(FEV11[0]) + \"'\"\r\n    if FEV11 != \"\" and FEV11[1] != \"\":\r\n        sql += \"and \\'FEV1%\\'<='\" + str(FEV11[1]) + \"'\"\r\n    if FEV2 != \"\" and FEV2[0] != \"\":\r\n        sql += \"and \\'FEV1/FVC>=\\''\" + str(FEV2[0]) + \"'\"\r\n    if FEV2 != \"\" and FEV2[1] != \"\":\r\n        sql += \"and \\'FEV1/FVC<=\\''\" + str(FEV2[1]) + \"'\"\r\n    if PEF != \"\" and PEF[0] != \"\":\r\n        sql += \"and PEF>='\" + str(PEF[0]) + \"'\"\r\n    if PEF != \"\" and PEF[1] != \"\":\r\n        sql += \"and PEF<='\" + str(PEF[1]) + \"'\"\r\n    if tongue != \"\":\r\n        sql += \"and tongue like '\" + \"%\" + str(tongue) + \"%\" + \"'\"\r\n    if pulse != \"\":\r\n        sql += \"and pulse like '\" + \"%\" + str(pulse) + \"%\" + \"'\"\r\n    offset = (int(page) - 1) * int(limit)  # 起始行\r\n    cursor.execute(sql)\r\n    total_data = cursor.fetchall()  # 所有满足条件的数据\r\n    sql += \"limit \" + str(offset) + ',' + str(limit)\r\n    cursor.execute(sql)  # 执行sql语句\r\n    data = cursor.fetchall()  # 获取数据\r\n    json_data = {}\r\n    result_data = []\r\n\r\n    sql_COLUMN_NAME = \"select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name = 'dwd_lung_info' and \" \\\r\n                      \"table_schema = 'medical_dw' ORDER BY ordinal_position\"\r\n    cursor.execute(sql_COLUMN_NAME)  # 执行sql语句\r\n    column_names = cursor.fetchall()  # 获取数据\r\n\r\n    for result in data:\r\n        one_person = {}\r\n        for i in range(len(column_names)):\r\n            one_person[column_names[i][0]] = str(result[i])\r\n        result_data.append(one_person)\r\n    json_data['total'] = len(total_data)\r\n    json_data['data'] = result_data\r\n    json_data = json.dumps(json_data, ensure_ascii=False)\r\n    return json_data\r\n    \r\n    \r\n@app.route('/liver_patient_info',methods=['POST'])\r\ndef liver_patient_info():\r\n    page = request.form.get('page')  # 页数\r\n    limit = request.form.get('limit')  # 每页显示的数量\r\n    if page is None or page == \"\":\r\n        page = 1\r\n    if limit is None or limit == \"\":\r\n        limit = 10\r\n    id = request.form.get('id')  # 编号\r\n    sex = request.form.get('sex')  # 性别\r\n    age = json.loads(request.form.get('age'))  # 年龄\r\n    symptoms_type = request.form.get('symptoms_type')#症型\r\n    ALT = json.loads(request.form.get('ALT'))\r\n    tongue = request.form.get('tongue')  # 舌象\r\n    pulse = request.form.get('pulse')  # 脉象\r\n    sql = \"select * from dwd_liver_info where 1=1 \"\r\n    if id != \"\":\r\n        sql += \"and id='\" + str(id) + \"'\"\r\n    if sex != \"\":\r\n        sql += \"and sex='\" + str(sex) + \"'\"\r\n    if age != \"\" and age[0] != \"\":\r\n        sql += \"and age>'\" + str(age[0]) + \"'\"\r\n    if age != \"\" and age[1] != \"\":\r\n        sql += \"and age<'\" + str(age[1]) + \"'\"\r\n    if ALT != \"\" and ALT[0] != \"\":\r\n        sql += \"and ALT>'\" + str(ALT[0]) + \"'\"\r\n    if ALT != \"\" and ALT[1] != \"\":\r\n        sql += \"and ALT<'\" + str(ALT[1]) + \"'\"\r\n    if symptoms_type != \"\":\r\n        sql += \"and symptoms_type='\" + str(symptoms_type) + \"'\"\r\n    if tongue != \"\":\r\n        sql += \"and tongue like '\" + \"%\" + str(tongue) + \"%\" + \"'\"\r\n    if pulse != \"\":\r\n        sql += \"and pulse like '\" + \"%\" + str(pulse) + \"%\" + \"'\"\r\n    offset = (int(page) - 1) * int(limit)  # 起始行\r\n    cursor.execute(sql)\r\n    total_data = cursor.fetchall()  # 所有满足条件的数据\r\n    sql += \"limit \" + str(offset) + ',' + str(limit)\r\n    cursor.execute(sql)  # 执行sql语句\r\n    data = cursor.fetchall()  # 获取数据\r\n    json_data = {}\r\n    result_data = []\r\n    sql_COLUMN_NAME = \"select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name = 'dwd_liver_info' and \" \\\r\n                      \"table_schema = 'medical_dw' ORDER BY ordinal_position\"\r\n    cursor.execute(sql_COLUMN_NAME)  # 执行sql语句\r\n    column_names = cursor.fetchall()  # 获取数据\r\n    for result in data:\r\n        one_person = {}\r\n        for i in range(len(column_names)):\r\n            one_person[column_names[i][0]] = str(result[i])\r\n        result_data.append(one_person)\r\n    json_data['total'] = len(total_data)\r\n    json_data['data'] = result_data\r\n    json_data = json.dumps(json_data, ensure_ascii=False)\r\n    return json_data\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision f5282cefdad1558f1726ceac5ffbaa090b749439)
+++ b/app.py	(date 1624184252901)
@@ -8,7 +8,7 @@
 import os
 from algorithm import predict
 from sqlalchemy import create_engine
-import pymssql
+import pymysql
 
 # 连接数据库
 try:
@@ -170,7 +170,7 @@
         if data_source=='MySQL':
             conn=pymysql.connect(host=host, port=port, user=user, passwd=passwd, db=db, charset=charset)
         if data_source == 'SqlServer':
-            conn= pymssql.connect( host=host, port=port,  user=user,password=passwd,  database=db ,charset=charset)
+            conn= pymysql.connect( host=host, port=port,  user=user,password=passwd,  database=db ,charset=charset)
         cursor = conn.cursor()
         # 读取病例信息表
         sqlstr = 'select * from ' + patient_info_table
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"62db865c-0ead-4767-9b09-9c5c5901d1de\" name=\"Default Changelist\" comment=\"Merge branch 'master' of github.com:WeiMin-Li-visual/medicalwarehouse&#10;&#10;# Conflicts:&#10;#&#9;.idea/misc.xml&#10;#&#9;.idea/weiboanalysis.iml&#10;#&#9;.idea/workspace.xml\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/fileInput.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/fileInput.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"JupyterTrust\" id=\"1a0023ed-3ffb-4518-babb-86fdda544d31\" />\r\n  <component name=\"ProjectId\" id=\"1jGOf1xcqEsO1xyZISeyPm4Mzkm\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\visual\\PyCharm Community Edition 2019.2.3\\pythonWorkPlace\\weiboanalysis\\static\\data\\weibo\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\visual\\PyCharm Community Edition 2019.2.3\\pythonWorkPlace\\weiboanalysis\\utils\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"medicalwarehouse\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.app\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"62db865c-0ead-4767-9b09-9c5c5901d1de\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1603427061766</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1603427061766</updated>\r\n      <workItem from=\"1604022893885\" duration=\"776000\" />\r\n      <workItem from=\"1623394639866\" duration=\"23000\" />\r\n      <workItem from=\"1623548677917\" duration=\"1054000\" />\r\n      <workItem from=\"1623575317953\" duration=\"77000\" />\r\n      <workItem from=\"1623577341534\" duration=\"117000\" />\r\n      <workItem from=\"1623727037848\" duration=\"2088000\" />\r\n      <workItem from=\"1623852502771\" duration=\"135000\" />\r\n      <workItem from=\"1624101824824\" duration=\"665000\" />\r\n      <workItem from=\"1624104135617\" duration=\"1467000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Merge branch 'master' of github.com:WeiMin-Li-visual/medicalwarehouse&#10;&#10;# Conflicts:&#10;#&#9;.idea/misc.xml&#10;#&#9;.idea/weiboanalysis.iml&#10;#&#9;.idea/workspace.xml\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge branch 'master' of github.com:WeiMin-Li-visual/medicalwarehouse&#10;&#10;# Conflicts:&#10;#&#9;.idea/misc.xml&#10;#&#9;.idea/weiboanalysis.iml&#10;#&#9;.idea/workspace.xml\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f5282cefdad1558f1726ceac5ffbaa090b749439)
+++ b/.idea/workspace.xml	(date 1624255057255)
@@ -3,6 +3,7 @@
   <component name="ChangeListManager">
     <list default="true" id="62db865c-0ead-4767-9b09-9c5c5901d1de" name="Default Changelist" comment="Merge branch 'master' of github.com:WeiMin-Li-visual/medicalwarehouse&#10;&#10;# Conflicts:&#10;#&#9;.idea/misc.xml&#10;#&#9;.idea/weiboanalysis.iml&#10;#&#9;.idea/workspace.xml">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/templates/fileInput.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/fileInput.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
Index: templates/fileInput.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta\r\n      name=\"viewport\"\r\n      content=\"width=device-width, initial-scale=1, maximum-scale=1\"\r\n    />\r\n    <title>数据导入</title>\r\n    <link rel=\"stylesheet\" href=\"../static/layui/css/layui.css\" media=\"all\" />\r\n    <script src=\"../static/js/jquery.js\"></script>\r\n    <style type=\"text/css\">\r\n      .file {\r\n        display: inline-block;\r\n        height: 38px;\r\n        line-height: 38px;\r\n        padding: 0 18px;\r\n        background-color: #1e9fff;\r\n        color: #fff;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        font-size: 14px;\r\n        border: none;\r\n        border-radius: 2px;\r\n        cursor: pointer;\r\n\r\n        position: relative;\r\n        overflow: hidden;\r\n        text-decoration: none;\r\n        text-indent: 0;\r\n      }\r\n      .file input {\r\n        position: absolute;\r\n        font-size: 100px;\r\n        right: 0;\r\n        top: 0;\r\n        opacity: 0;\r\n      }\r\n      .file:hover {\r\n        background: #78c3f3;\r\n        border-color: #78c3f3;\r\n        color: #004974;\r\n        text-decoration: none;\r\n      }\r\n      .hide {\r\n        display: none;\r\n      }\r\n      .constrain_width {\r\n        width: 45%;\r\n      }\r\n      .layui-form-pane .layui-form-label {\r\n        width: 130px;\r\n      }\r\n      .layui-form-pane .layui-input-block {\r\n        margin-left: 130px;\r\n      }\r\n      .file_icon:hover + .input_clear {\r\n        opacity: 1;\r\n      }\r\n      .input_clear {\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 10px;\r\n        transform: translateY(-50%);\r\n        opacity: 0;\r\n        cursor: pointer;\r\n        transition: all 0.3s;\r\n      }\r\n      .input_clear:hover {\r\n        opacity: 1;\r\n      }\r\n      .uploadProgress {\r\n        width: 200px;\r\n        display: inline-block;\r\n      }\r\n      .uploadZi {\r\n        display: inline-block;\r\n        margin-bottom: 7px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div style=\"padding: 15px\">\r\n      <fieldset\r\n        class=\"layui-elem-field layui-field-title\"\r\n        style=\"margin-top: 50px\"\r\n      >\r\n        <legend>数据导入</legend>\r\n      </fieldset>\r\n      <form name=\"myForm\" class=\"layui-form layui-form-pane\">\r\n        <div class=\"layui-form-item constrain_width\" pane=\"\">\r\n          <label class=\"layui-form-label\">数据来源</label>\r\n          <div class=\"layui-input-block\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"data_source\"\r\n              value=\"local\"\r\n              title=\"本地\"\r\n              lay-filter=\"show\"\r\n              checked\r\n            />\r\n            <input\r\n              type=\"radio\"\r\n              name=\"data_source\"\r\n              value=\"MySQL\"\r\n              title=\"Mysql\"\r\n              lay-filter=\"show\"\r\n            />\r\n            <input\r\n              type=\"radio\"\r\n              name=\"data_source\"\r\n              value=\"SqlServer\"\r\n              title=\"SqlServer\"\r\n              lay-filter=\"show\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"layui-form-item constrain_width\" pane=\"\">\r\n          <label class=\"layui-form-label\">科室</label>\r\n          <div class=\"layui-input-block\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"dept\"\r\n              value=\"kidney\"\r\n              title=\"肾科\"\r\n              checked\r\n            />\r\n            <input type=\"radio\" name=\"dept\" value=\"liver\" title=\"肝科\" />\r\n            <input type=\"radio\" name=\"dept\" value=\"lung\" title=\"肺科\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"mysql hide\">\r\n          <div class=\"layui-inline\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">host</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"host\"\r\n                  value=\"localhost\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"host\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">port</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"port\"\r\n                  value=\"3306\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"port\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">user</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"user\"\r\n                  value=\"root\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"user\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div></div>\r\n          <!-- 换行用 -->\r\n          <div class=\"layui-inline\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">password</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"passwd\"\r\n                  value=\"000000\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"password\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">db</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"db\"\r\n                  value=\"medicaldb\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"db\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline SqlServer\">\r\n            <div class=\"layui-form-item\">\r\n              <label class=\"layui-form-label\">charset</label>\r\n              <div class=\"layui-input-block\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"charset\"\r\n                  value=\"utf8\"\r\n                  placeholder=\"请输入\"\r\n                  class=\"layui-input\"\r\n                  lay-verify=\"charset\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"layui-form-item\">\r\n          <div class=\"layui-inline local\">\r\n            <label class=\"layui-form-label\">病例信息表</label>\r\n            <div class=\"layui-input-inline\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"fileName\"\r\n                id=\"selectFileName\"\r\n                autocomplete=\"off\"\r\n                placeholder=\"未选择文件\"\r\n                class=\"layui-input file_icon\"\r\n                readonly=\"readonly\"\r\n                lay-verify=\"patient_info\"\r\n              />\r\n              <i class=\"layui-icon input_clear\" data-relate-input=\"file\"\r\n                >&#x1006;</i\r\n              >\r\n              <!-- &#x1007; -->\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline mysql hide\">\r\n            <label class=\"layui-form-label\">病例信息表名</label>\r\n            <div class=\"layui-input-inline\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"patient_info_table\"\r\n                placeholder=\"请输入\"\r\n                class=\"layui-input\"\r\n                lay-verify=\"patient_table_name\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline local\">\r\n            <!--\t\t\t\t\t<input type=\"file\" name=\"pulseFile\" class=\"file\">-->\r\n            <a href=\"javascript:;\" class=\"file\"\r\n              >点击选择文件\r\n              <input\r\n                type=\"file\"\r\n                name=\"infoFile\"\r\n                id=\"selectFile\"\r\n                class=\"file\"\r\n                title=\"\"\r\n                data-name=\"file\"\r\n              />\r\n            </a>\r\n          </div>\r\n          <div class=\"layui-inline local\">\r\n            <label class=\"layui-form-label\">编码</label>\r\n            <div class=\"layui-input-block\">\r\n              <select name=\"patient_info_file_encoding\">\r\n                <option value=\"utf-8\" selected>utf-8</option>\r\n                <option value=\"utf-16 le\">utf-16 le</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"layui-form-item\">\r\n          <div class=\"layui-inline local\">\r\n            <label class=\"layui-form-label\">脉搏数据目录</label>\r\n            <div class=\"layui-input-inline\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"fileName\"\r\n                id=\"selectDirName\"\r\n                autocomplete=\"off\"\r\n                placeholder=\"未选择文件\"\r\n                class=\"layui-input file_icon\"\r\n                readonly=\"readonly\"\r\n                lay-verify=\"pulse_dir\"\r\n              />\r\n              <i class=\"layui-icon input_clear\" data-relate-input=\"fileDir\"\r\n                >&#x1006;</i\r\n              >\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline mysql hide\">\r\n            <label class=\"layui-form-label\">脉搏数据表名</label>\r\n            <div class=\"layui-input-inline\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"pulse_table_na_rule\"\r\n                value=\"病例编号\"\r\n                class=\"layui-input\"\r\n                lay-verify=\"pulse_table\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"layui-inline local\">\r\n            <!--\t\t\t\t\t<input type=\"file\" name=\"pulseFile\" class=\"file\">-->\r\n            <a href=\"javascript:;\" class=\"file\"\r\n              >点击选择目录\r\n              <input\r\n                type=\"file\"\r\n                name=\"pulseDir\"\r\n                id=\"selectDir\"\r\n                class=\"file\"\r\n                data-name=\"fileDir\"\r\n                title=\"\"\r\n                webkitdirectory\r\n              />\r\n            </a>\r\n          </div>\r\n          <div class=\"layui-inline local\">\r\n            <label class=\"layui-form-label\">编码</label>\r\n            <div class=\"layui-input-block\">\r\n              <select name=\"pulse_file_encoding\" lay-verify=\"\">\r\n                <option value=\"utf-8\">utf-8</option>\r\n                <option value=\"utf-16 le\" selected>utf-16 le</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"layui-form-item\">\r\n          <div class=\"layui-inline\">\r\n            <button class=\"layui-btn\" lay-submit lay-filter=\"formDemo\">\r\n              导入\r\n            </button>\r\n            <button\r\n              type=\"reset\"\r\n              class=\"layui-btn layui-btn-primary import_reset\"\r\n            >\r\n              重置\r\n            </button>\r\n          </div>\r\n          <div class=\"layui-inline uploadUi\">\r\n            <div class=\"layui-progress uploadProgress\" lay-filter=\"upload\">\r\n              <div class=\"layui-progress-bar\" lay-percent=\"0%\"></div>\r\n            </div>\r\n            <span class=\"uploadZi\"><i class=\"layui-icon layui-anim layui-anim-rotate layui-anim-loop\">&#xe63d;</i>上传中</span>\r\n          </div>\r\n        </div>\r\n        \r\n      </form>\r\n    </div>\r\n    <script src=\"../static/layui/layui.js\"></script>\r\n    <script src=\"../static/js/jquery.js\"></script>\r\n    <script>\r\n      //Demo\r\n      layui.use([\"form\", \"layer\", \"element\"], function () {\r\n        const form = layui.form;\r\n        const layer = layui.layer;\r\n        const element = layui.element;\r\n        //监听提交\r\n        form.on(\"radio(show)\", (data) => {\r\n          const { value } = data;\r\n          formStatu = value;\r\n          switchUi(value);\r\n        });\r\n        form.verify({\r\n          host: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") && value.trim().length === 0 && \"请输入host\",\r\n          port: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") && value.trim().length === 0 && \"请输入port\",\r\n          user: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") && value.trim().length === 0 && \"请输入user\",\r\n          password: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") &&\r\n            value.trim().length === 0 &&\r\n            \"请输入password\",\r\n          db: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") && value.trim().length === 0 && \"请输入db\",\r\n          charset: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") &&\r\n            value.trim().length === 0 &&\r\n            \"请输入charset\",\r\n          patient_table_name: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") &&\r\n            value.trim().length === 0 &&\r\n            \"请输入病例信息表名\",\r\n          charset: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") &&\r\n            value.trim().length === 0 &&\r\n            \"请输入charset\",\r\n          pulse_table: (value) =>\r\n            (formStatu === \"MySQL\" || formStatu === \"SqlServer\") &&\r\n            value.trim().length === 0 &&\r\n            \"请输入脉搏数据表名\",\r\n          pulse_dir: (value) =>\r\n            formStatu === \"local\" &&\r\n            value.trim().length === 0 &&\r\n            \"请输入脉搏数据表名\",\r\n          patient_info: (value) =>\r\n            formStatu === \"local\" &&\r\n            value.trim().length === 0 &&\r\n            \"请输入脉搏数据表名\",\r\n        });\r\n        form.on(\"submit(formDemo)\", function (data) {\r\n          const { field, form } = data;\r\n          let uploadData = new FormData();\r\n          let sign = false;\r\n          [...fileData].forEach((e) => uploadData.append(e[0], e[1]));\r\n          \r\n          for (const key in field) {\r\n            if(key === \"data_source\" && field[key] !== \"local\") {\r\n              sign = true\r\n            }\r\n            uploadData.append(key, field[key].trim());\r\n          }\r\n          if(sign) {\r\n            uploadData.delete(\"file\");\r\n            uploadData.delete(\"fileDir\");\r\n          }\r\n          uploadUi.show();\r\n          $.ajax({\r\n            url: \"/dataimport\",\r\n            type: \"POST\",\r\n            data: uploadData,\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false,\r\n            success: (data) => {\r\n              form.reset();\r\n              formStatu = \"local\";\r\n              switchUi(formStatu);\r\n              clearInput(\"file\");\r\n              clearInput(\"fileDir\");\r\n              uploadUi.hide();\r\n              element.progress(\"upload\", `0%`);\r\n              layer.msg(data);\r\n            },\r\n            error: (err) => {\r\n              uploadUi.hide();\r\n              element.progress(\"upload\", `0%`);\r\n            },\r\n            xhr: function () {\r\n              myXhr = $.ajaxSettings.xhr();\r\n              if (myXhr.upload) {\r\n                myXhr.upload.addEventListener(\r\n                  \"progress\",\r\n                  function (e) {\r\n                    if (e.lengthComputable) {\r\n                      var percent = Math.floor((e.loaded / e.total) * 100);\r\n                      element.progress(\"upload\", `${percent}%`);\r\n                    }\r\n                  },\r\n                  false\r\n                );\r\n              }\r\n              return myXhr;\r\n            },\r\n          });\r\n          return false;\r\n        });\r\n      });\r\n\r\n      $(\"#selectFile\").on(\"change\", (e) => {\r\n        const { files, dataset } = e.target;\r\n        if (files.length === 0) return;\r\n        // let reader = new FileReader();\r\n        // reader.readAsText(files[0])\r\n        // reader.onload = function () {\r\n        //   console.log(reader.result.split(\"\\n\"));\r\n        // }\r\n        const { name } = dataset;\r\n        clearInput(\"file\");\r\n        addFile([...files], name);\r\n        e.target.value = \"\";\r\n      });\r\n      $(\"#selectDir\").on(\"change\", (e) => {\r\n        const { files, dataset } = e.target;\r\n        const { name } = dataset;\r\n        addFile([...files], name);\r\n        e.target.value = \"\";\r\n      });\r\n      $(\".input_clear\").on(\"click\", (e) => {\r\n        const { dataset } = e.target;\r\n        clearInput(dataset.relateInput);\r\n      });\r\n      $(\".import_reset\").on(\"click\", (e) => {\r\n        formStatu = \"local\";\r\n        clearInput(\"file\");\r\n        clearInput(\"fileDir\");\r\n        switchUi(formStatu);\r\n      });\r\n      function switchUi(value) {\r\n        switch (value) {\r\n          case \"MySQL\": {\r\n            sourceMysql.removeClass(\"hide\");\r\n            sourceLocal.addClass(\"hide\");\r\n            sourceSqlserver.removeClass(\"hide\");\r\n            break;\r\n          }\r\n          case \"local\": {\r\n            sourceMysql.addClass(\"hide\");\r\n            sourceLocal.removeClass(\"hide\");\r\n            sourceSqlserver.addClass(\"hide\");\r\n            break;\r\n          }\r\n          case \"SqlServer\": {\r\n            sourceMysql.removeClass(\"hide\");\r\n            sourceLocal.addClass(\"hide\");\r\n            sourceSqlserver.addClass(\"hide\");\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      function addFile(files, name) {\r\n        const { data, el } = fileInputName[name];\r\n        for (let i = 0; i < files.length; ++i) {\r\n          if (data.indexOf(files[i].name) === -1) {\r\n            fileData.append(name, files[i]);\r\n            data.push(files[i].name);\r\n          }\r\n        }\r\n        el.val(data.join(\";\"));\r\n      }\r\n      function clearInput(str) {\r\n        const { data, el } = fileInputName[str];\r\n        fileData.delete(str);\r\n        data.length = 0;\r\n        el.val(\"\");\r\n        console.log([...fileData]);\r\n      }\r\n      const sourceMysql = $(\".mysql\");\r\n      const sourceLocal = $(\".local\");\r\n      const sourceSqlserver = $(\".SqlServer\");\r\n      const uploadUi = $(\".uploadUi\");\r\n      uploadUi.hide();\r\n      let formStatu = \"local\";\r\n      let fileData = new FormData();\r\n      let fileInputName = {\r\n        file: {\r\n          data: [],\r\n          el: $(\"#selectFileName\"),\r\n        },\r\n        fileDir: {\r\n          data: [],\r\n          el: $(\"#selectDirName\"),\r\n        },\r\n      };\r\n    </script>\r\n  </body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/fileInput.html b/templates/fileInput.html
--- a/templates/fileInput.html	(revision f5282cefdad1558f1726ceac5ffbaa090b749439)
+++ b/templates/fileInput.html	(date 1624184079575)
@@ -534,7 +534,6 @@
         fileData.delete(str);
         data.length = 0;
         el.val("");
-        console.log([...fileData]);
       }
       const sourceMysql = $(".mysql");
       const sourceLocal = $(".local");
